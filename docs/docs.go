// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Give server index page response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Index page",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login and generate new pair of token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.LoginRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login Success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/web.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/login.LoginResponsePayload"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Input",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/web.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Login Credential Error",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    },
                    "415": {
                        "description": "Not a json request",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid JSON input",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Unknown Internal Error",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Generate new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/web.BaseResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/refresh.RefreshResponsePayload"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.BaseResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "login.LoginRequestPayload": {
            "description": "Information that should be available when do a login process",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User Email",
                    "type": "string",
                    "example": "someone@example.com"
                },
                "password": {
                    "description": "User Password",
                    "type": "string",
                    "example": "secret"
                }
            }
        },
        "login.LoginResponsePayload": {
            "description": "Login response when process success",
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Token that used to access the resources",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Token that used to generate new access token",
                    "type": "string"
                }
            }
        },
        "refresh.RefreshResponsePayload": {
            "description": "Refresh endpoint response when process success",
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Token that used to access the resources",
                    "type": "string"
                }
            }
        },
        "web.BaseResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "success",
                        "failed"
                    ]
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Open Courseware Application",
	Description:      "This is Open Couseware backend",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
