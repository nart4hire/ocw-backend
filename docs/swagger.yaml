definitions:
  admin.AdminAddUserPayload:
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
      name:
        description: User name
        example: someone
        type: string
      role:
        description: User Role
        example: admin
        type: string
    required:
    - email
    - name
    - role
    type: object
  admin.AdminUpdateUserPayload:
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
      name:
        description: User name
        example: someone
        type: string
      role:
        description: User Role
        example: admin
        type: string
    required:
    - email
    - name
    - role
    type: object
  confirm.ConfirmRequestPayload:
    description: Information that should be available when you confirm a password
      reset
    properties:
      confirmToken:
        description: Web Token that was appended to the link
        type: string
      password:
        description: User Password
        example: secret
        type: string
      password_validation:
        description: User Password Validation, must be same as user
        example: secret
        type: string
    required:
    - password
    - password_validation
    type: object
  course.AddCourseRequestPayload:
    description: Information that should be available when you add a course
    properties:
      abbreviation:
        description: Course Name Abbreviation
        type: string
      addCourseToken:
        description: Web Token that was appended to the link
        type: string
      description:
        description: Course Description (Can be left empty)
        type: string
      email:
        description: Contributor Email
        example: someone@example.com
        type: string
      id:
        description: Course ID
        type: string
      lecturer:
        description: Course Lecturer Name
        type: string
      majabbr:
        description: Course Major Abbreviation
        type: string
      major_id:
        description: Major Id, will be set by the server
        type: string
      name:
        description: Course Name
        type: string
    required:
    - email
    - id
    - name
    type: object
  course.UpdateCourseRequestPayload:
    description: Information that should be available when you add a course
    properties:
      abbreviation:
        description: Course Name Abbreviation
        type: string
      description:
        description: Course Description (Can be left empty)
        type: string
      email:
        description: Contributor Email
        example: someone@example.com
        type: string
      lecturer:
        description: Course Lecturer Name
        type: string
      majabbr:
        description: Course Major Abbreviation
        type: string
      major_id:
        description: Major Id, will be set by the server
        type: string
      name:
        description: Course Name
        type: string
      updateCourseToken:
        description: Web Token that was appended to the link
        type: string
    required:
    - email
    - name
    type: object
  faculty.AddFacultyRequestPayload:
    description: Information that should be available when you add a faculty
    properties:
      abbreviation:
        description: Faculty Name Abbreviation
        type: string
      faculty_token:
        description: Web Token that was appended to the link
        type: string
      name:
        description: Faculty Name
        type: string
    required:
    - abbreviation
    - name
    type: object
  faculty.UpdateFacultyRequestPayload:
    description: Information that should be available when you update a faculty
    properties:
      abbreviation:
        description: Faculty Name Abbreviation
        type: string
      name:
        description: Faculty Name
        type: string
      updateFacultyToken:
        description: Web Token that was appended to the link
        type: string
    required:
    - abbreviation
    - name
    type: object
  lesson.AddLessonRequestPayload:
    description: Information that should be available when you add a lesson
    properties:
      addLessonToken:
        description: Web Token that was appended to the link
        type: string
      course_id:
        description: Course ID
        type: string
      description:
        description: Lesson Description (Can be left empty)
        type: string
      name:
        description: Lesson Name
        type: string
      order:
        description: Lesson Order
        type: integer
    required:
    - course_id
    - name
    - order
    type: object
  lesson.UpdateLessonRequestPayload:
    description: Information that should be available when you update a lesson
    properties:
      course_id:
        description: Course ID
        type: string
      description:
        description: Lesson Description (Can be left empty)
        type: string
      name:
        description: Lesson Name
        type: string
      order:
        description: Lesson Order
        type: integer
      updateLessonToken:
        description: Web Token that was appended to the link
        type: string
    required:
    - course_id
    - name
    - order
    type: object
  login.LoginRequestPayload:
    description: Information that should be available when do a login process
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
      password:
        description: User Password
        example: secret
        type: string
    required:
    - email
    - password
    type: object
  login.LoginResponsePayload:
    description: Login response when process success
    properties:
      access_token:
        description: Token that used to access the resources
        type: string
      refresh_token:
        description: Token that used to generate new access token
        type: string
    type: object
  major.AddMajorRequestPayload:
    description: Information that should be available when you add a major
    properties:
      abbreviation:
        description: Major Name Abbreviation
        type: string
      facabbr:
        description: Major Faculty Abbreviation
        type: string
      faculty_id:
        description: Faculty Id, will be set by the server
        type: string
      major_token:
        description: Web Token that was appended to the link
        type: string
      name:
        description: Major Name
        type: string
    required:
    - abbreviation
    - name
    type: object
  major.UpdateMajorRequestPayload:
    description: Information that should be available when you update a major
    properties:
      abbreviation:
        description: Major Name Abbreviation
        type: string
      facabbr:
        description: Major Faculty Abbreviation
        type: string
      faculty_id:
        description: Faculty Id, will be set by the server
        type: string
      name:
        description: Major Name
        type: string
      updateMajorToken:
        description: Web Token that was appended to the link
        type: string
    required:
    - abbreviation
    - name
    type: object
  material.Content:
    properties:
      id:
        type: string
      link:
        type: string
      material_id:
        type: string
      type:
        $ref: '#/definitions/material.MaterialType'
    type: object
  material.CreateMaterialRequest:
    properties:
      name:
        type: string
      week:
        type: integer
    required:
    - name
    - week
    type: object
  material.CreateMaterialResponse:
    properties:
      material_id:
        type: string
    type: object
  material.Material:
    properties:
      contents:
        items:
          $ref: '#/definitions/material.Content'
        type: array
      course_id:
        type: string
      creator_email:
        type: string
      id:
        type: string
      name:
        type: string
      week:
        type: integer
    type: object
  material.MaterialType:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - Handout
    - Video
    - External
  material.NewContentRequest:
    properties:
      link:
        type: string
      type:
        $ref: '#/definitions/material.MaterialType'
    required:
    - type
    type: object
  material.NewContentResponse:
    properties:
      upload_link:
        type: string
    type: object
  materials.AddLessonMaterialsRequestPayload:
    description: Information that should be available when you add a lesson material
    properties:
      addLessonMaterialsToken:
        description: Web Token that was appended to the link
        type: string
      contents:
        description: Lesson Contents
        type: string
      lesson_id:
        description: Lesson ID
        type: string
      material_id:
        description: Lesson Material ID, optional
        type: string
      order:
        description: Lesson Material Order
        type: integer
    required:
    - contents
    - lesson_id
    - order
    type: object
  materials.UpdateLessonMaterialsRequestPayload:
    description: Information that should be available when you update a lesson material
    properties:
      contents:
        description: Lesson Contents
        type: string
      lesson_id:
        description: Lesson ID
        type: string
      material_id:
        description: Lesson Material ID, optional
        type: string
      order:
        description: Lesson Material Order
        type: integer
      updateLessonMaterialsToken:
        description: Web Token that was appended to the link
        type: string
    required:
    - contents
    - lesson_id
    - order
    type: object
  quiz.AddQuizRequestPayload:
    description: Information that should be available when you add a quiz
    properties:
      addQuizToken:
        description: Web Token that was appended to the link
        type: string
      course_id:
        description: Course ID
        type: string
      name:
        description: Quiz Name
        type: string
    required:
    - course_id
    - name
    type: object
  quiz.AnswerOption:
    properties:
      answer:
        type: string
      id:
        type: string
      is_solution:
        type: boolean
      media_id:
        items:
          type: string
        type: array
    type: object
  quiz.FinishQuizPayload:
    properties:
      data:
        items:
          $ref: '#/definitions/quiz.Response'
        type: array
    type: object
  quiz.Quiz:
    properties:
      course_id:
        type: string
      creator_email:
        type: string
      id:
        type: string
      nama:
        type: string
    type: object
  quiz.QuizDetail:
    properties:
      course_id:
        type: string
      description:
        type: string
      help:
        type: string
      id:
        type: string
      media:
        items:
          $ref: '#/definitions/quiz.QuizMedia'
        type: array
      name:
        type: string
      problems:
        items:
          $ref: '#/definitions/quiz.QuizProblem'
        type: array
    type: object
  quiz.QuizMedia:
    properties:
      id:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  quiz.QuizProblem:
    properties:
      answers:
        items:
          $ref: '#/definitions/quiz.AnswerOption'
        type: array
      id:
        type: string
      media_id:
        items:
          type: string
        type: array
      question:
        type: string
    type: object
  quiz.Response:
    properties:
      answer_id:
        type: string
      problem_id:
        type: string
    type: object
  quiz.UpdateQuizRequestPayload:
    description: Information that should be available when you update a quiz
    properties:
      id:
        description: Quiz ID, Set by param
        type: string
      updateQuizToken:
        description: Web Token that was appended to the link
        type: string
    type: object
  refresh.RefreshResponsePayload:
    description: Refresh endpoint response when process success
    properties:
      access_token:
        description: Token that used to access the resources
        type: string
    type: object
  register.RegisterRequestPayload:
    description: Information that should be available when do a registration process
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
      name:
        description: User name
        example: someone
        type: string
      password:
        description: User Password
        example: secret
        type: string
      password_validation:
        description: User Password Validation, must be same as user
        example: secret
        type: string
    required:
    - email
    - name
    - password
    - password_validation
    type: object
  request.RequestRequestPayload:
    description: Information that should be available when password reset is requested
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
    required:
    - email
    type: object
  verification.VerificationRequestPayload:
    properties:
      id:
        example: 6ba7b812-9dad-11d1-80b4-00c04fd430c8
        type: string
    required:
    - id
    type: object
  verification.VerificationSendRequestPayload:
    description: Information that should be passed when request verify
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
    required:
    - email
    type: object
  web.BaseResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        enum:
        - success
        - failed
        type: string
    type: object
info:
  contact: {}
  description: This is Open Couseware backend
  title: Open Courseware Application
  version: 1.0.1
paths:
  /:
    get:
      description: Give server index page response
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Index page
      tags:
      - common
  /admin/user:
    get:
      description: Get all users from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get All User
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Add a user to database
      parameters:
      - description: Admin Add User Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.AdminAddUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add User
      tags:
      - admin
  /admin/user/{email}:
    delete:
      consumes:
      - application/json
      description: Delete a user from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete User By Id
      tags:
      - admin
    get:
      description: Get a user from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get User By Email
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Update a user from database
      parameters:
      - description: Admin Update User Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.AdminUpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update User By Id
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login and generate new pair of token
      parameters:
      - description: Login payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/login.LoginRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/login.LoginResponsePayload'
              type: object
        "400":
          description: Bad Input
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "403":
          description: Login Credential Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "415":
          description: Not a json request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Invalid JSON input
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Unknown Internal Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token
      parameters:
      - description: Refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/refresh.RefreshResponsePayload'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Refresh Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Generate New Account as Member
      parameters:
      - description: Register Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/register.RegisterRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Register New Account
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Do Email Verification to user
      parameters:
      - description: Register Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/verification.VerificationRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Do Email Verification
      tags:
      - auth
  /auth/verify/resend:
    post:
      consumes:
      - application/json
      description: Send Email Verification to user
      parameters:
      - description: Register Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/verification.VerificationSendRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Send Email Verification
      tags:
      - auth
  /course:
    get:
      description: Retrieve a list of all available courses.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get all courses
      tags:
      - course
    put:
      consumes:
      - application/json
      description: Add a new course with the given details
      parameters:
      - description: AddCourseToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Course payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/course.AddCourseRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add a new course
      tags:
      - course
  /course/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a course with the specified ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: DeleteCourseToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete course by ID
      tags:
      - course
    get:
      description: Retrieve a course by ID
      parameters:
      - description: ID of the course to retrieve
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get a course by ID
      tags:
      - course
    patch:
      consumes:
      - application/json
      description: Update an existing course.
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateCourseToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update Course Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/course.UpdateCourseRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update Course
      tags:
      - course
  /course/{id}/material:
    post:
      consumes:
      - application/json
      description: Add new material
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Material Request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/material.CreateMaterialRequest'
      - description: Course id
        example: IF3230
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/material.CreateMaterialResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add Material
      tags:
      - content
  /course/{id}/materials:
    get:
      consumes:
      - application/json
      description: Get materials
      parameters:
      - description: Course id
        example: IF3270
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/material.Material'
                  type: array
              type: object
      summary: Get materials
      tags:
      - content
  /course/{id}/quiz:
    get:
      consumes:
      - application/json
      description: Get all cours
      parameters:
      - description: Course id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/quiz.Quiz'
                  type: array
              type: object
      summary: Get Course quiz
      tags:
      - course
  /course/faculty:
    get:
      description: Retrieves a list of all faculties
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get all faculties
      tags:
      - course
    put:
      consumes:
      - application/json
      description: Adds a new faculty with the given details
      parameters:
      - description: AddFacultyToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Faculty payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/faculty.AddFacultyRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add a new faculty
      tags:
      - course
  /course/faculty/{id}:
    get:
      description: Retrieve faculty data by UUID
      parameters:
      - description: Faculty ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get faculty by ID
      tags:
      - course
    patch:
      description: Update a faculty with the given ID
      parameters:
      - description: Faculty ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Update Faculty Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/faculty.UpdateFacultyRequestPayload'
      - description: UpdateFacultyToken
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update a faculty
      tags:
      - course
  /course/faculty/courses/{id}:
    get:
      description: Retrieve all courses that belong to the faculty with the given
        ID
      parameters:
      - description: Faculty ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get all courses by faculty ID
      tags:
      - course
  /course/faculty/majors/{id}:
    get:
      description: Returns a list of majors associated with the given faculty ID
      parameters:
      - description: Faculty ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get majors by faculty ID
      tags:
      - course
  /course/major:
    get:
      description: Get a list of all majors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get all majors
      tags:
      - course
    put:
      consumes:
      - application/json
      description: Add a new major to a faculty
      parameters:
      - description: AddMajorToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Major payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/major.AddMajorRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add Major
      tags:
      - course
  /course/major/{id}:
    get:
      description: Get a major by ID
      parameters:
      - description: Major ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get a major by ID
      tags:
      - course
    put:
      consumes:
      - application/json
      description: Update a major with the given ID
      parameters:
      - description: Major ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: UpdateMajorToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update Major payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/major.UpdateMajorRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update a major
      tags:
      - course
  /course/major/courses/{id}:
    get:
      description: Retrieve all courses related to a major
      parameters:
      - description: Major ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get courses by major
      tags:
      - course
  /lesson:
    put:
      consumes:
      - application/json
      description: Add a new lesson with the given details
      parameters:
      - description: AddLessonToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Lesson payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/lesson.AddLessonRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add a new lesson
      tags:
      - lesson
  /lesson/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a lesson with the specified ID
      parameters:
      - description: Lesson ID
        in: path
        name: id
        required: true
        type: string
      - description: DeleteLessonToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete lesson by ID
      tags:
      - lesson
    get:
      description: Retrieve lesson data by UUID
      parameters:
      - description: Lesson ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get lesson by ID
      tags:
      - lesson
    patch:
      description: Update a lesson material with the given ID
      parameters:
      - description: Lesson Material ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Update Lesson Materials Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/materials.UpdateLessonMaterialsRequestPayload'
      - description: UpdateLessonMaterialsToken
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update a lesson material
      tags:
      - lesson
  /lesson/course/{id}:
    get:
      description: Retrieve lesson data by course ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid ID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get lesson by course ID
      tags:
      - lesson
  /lesson/material:
    put:
      consumes:
      - application/json
      description: Add a new lesson material with the given details
      parameters:
      - description: AddLessonMaterialsToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add Lesson Material payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/materials.AddLessonMaterialsRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add a new lesson material
      tags:
      - lesson
  /lesson/material/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a lesson material with the specified ID
      parameters:
      - description: Lesson Material ID
        in: path
        name: id
        required: true
        type: string
      - description: DeleteLessonMaterialToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete lesson material by id
      tags:
      - lesson
    get:
      description: Retrieve lesson data by UUID
      parameters:
      - description: Lesson ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get lesson by ID
      tags:
      - lesson
  /lesson/material/lesson/{id}:
    get:
      description: Retrieve lesson materials data by lesson ID
      parameters:
      - description: Lesson ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Invalid UUID provided in request path
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get lesson materials by lesson ID
      tags:
      - lesson
  /material/{id}:
    delete:
      consumes:
      - application/json
      description: Delete material
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Material id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete material
      tags:
      - content
    get:
      consumes:
      - application/json
      description: Get material detail
      parameters:
      - description: Material id
        example: IF3270
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/material.Material'
              type: object
      summary: Get material detail
      tags:
      - content
    post:
      consumes:
      - application/json
      description: Add content of material
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add content request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/material.NewContentRequest'
      - description: Material id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/material.NewContentResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add Content
      tags:
      - content
  /material/{id}/content/{content-id}:
    delete:
      consumes:
      - application/json
      description: Delete content of material
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Material id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Content id
        format: uuid
        in: path
        name: content-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete Content
      tags:
      - content
  /quiz:
    put:
      consumes:
      - application/json
      description: New Quiz
      parameters:
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Add Quiz payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/quiz.AddQuizRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: New Quiz
      tags:
      - quiz
  /quiz/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Quiz
      parameters:
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete Quiz
      tags:
      - quiz
    get:
      consumes:
      - application/json
      description: Get Quiz Detail
      parameters:
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/quiz.Quiz'
              type: object
      summary: Get Quiz Detail
      tags:
      - quiz
    patch:
      consumes:
      - application/json
      description: Update Quiz
      parameters:
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Update Quiz payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/quiz.UpdateQuizRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update Quiz
      tags:
      - quiz
  /quiz/{id}/finish:
    post:
      consumes:
      - application/json
      description: Finish quiz session and get the score
      parameters:
      - description: Authenticate User (any role)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Quiz Finish payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/quiz.FinishQuizPayload'
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/quiz.QuizDetail'
              type: object
      summary: Finish Quiz
      tags:
      - quiz
  /quiz/{id}/solution:
    get:
      consumes:
      - application/json
      description: Take a quiz
      parameters:
      - description: Authenticate User (any role)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/quiz.QuizDetail'
              type: object
      summary: Get Quiz Solution
      tags:
      - quiz
  /quiz/{id}/take:
    post:
      consumes:
      - application/json
      description: Take a quiz
      parameters:
      - description: Authenticate User (any role)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Quiz id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/quiz.QuizDetail'
              type: object
      summary: Take Quiz
      tags:
      - quiz
  /reset/confirm:
    put:
      description: Do confirmation to reset password
      parameters:
      - description: Email validation token
        in: header
        name: Authorization
        required: true
        type: string
      - description: payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/confirm.ConfirmRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Confirm Reset Password
      tags:
      - reset
  /reset/request:
    post:
      description: Send Reset password token to email
      parameters:
      - description: payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.RequestRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Request Reset Password Token
      tags:
      - reset
  /reset/validate:
    get:
      description: Send Reset password token to email
      parameters:
      - description: Email validation token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Request Reset Password Token
      tags:
      - reset
swagger: "2.0"
