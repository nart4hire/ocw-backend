definitions:
  login.LoginRequestPayload:
    description: Information that should be available when do a login process
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
      password:
        description: User Password
        example: secret
        type: string
    required:
    - email
    - password
    type: object
  login.LoginResponsePayload:
    description: Login response when process success
    properties:
      access_token:
        description: Token that used to access the resources
        type: string
      refresh_token:
        description: Token that used to generate new access token
        type: string
    type: object
  refresh.RefreshResponsePayload:
    description: Refresh endpoint response when process success
    properties:
      access_token:
        description: Token that used to access the resources
        type: string
    type: object
  register.RegisterRequestPayload:
    description: Information that should be available when do a registration process
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
      name:
        description: User name
        example: someone
        type: string
      password:
        description: User Password
        example: secret
        type: string
      password_validation:
        description: User Password Validation, must be same as user
        example: secret
        type: string
    required:
    - email
    - name
    - password
    - password_validation
    type: object
  verification.VerificationRequestPayload:
    description: Information that should be passed when request verify
    properties:
      email:
        description: User Email
        example: someone@example.com
        type: string
    required:
    - email
    type: object
  web.BaseResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        enum:
        - success
        - failed
        type: string
    type: object
info:
  contact: {}
  description: This is Open Couseware backend
  title: Open Courseware Application
  version: 1.0.1
paths:
  /:
    get:
      description: Give server index page response
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Index page
      tags:
      - common
  /admin/user:
    delete:
      description: Delete a user from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Delete User By Id
      tags:
      - admin
    get:
      description: Get all users from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get All User
      tags:
      - admin
    patch:
      description: Update a user from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Update User By Id
      tags:
      - admin
    post:
      description: Add a user to database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Add User
      tags:
      - admin
  /admin/user/{id}:
    get:
      description: Get a user from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Get User By Email
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login and generate new pair of token
      parameters:
      - description: Login payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/login.LoginRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Login Success
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/login.LoginResponsePayload'
              type: object
        "400":
          description: Bad Input
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "403":
          description: Login Credential Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "415":
          description: Not a json request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "422":
          description: Invalid JSON input
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Unknown Internal Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token
      parameters:
      - description: Refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/web.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/refresh.RefreshResponsePayload'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Refresh Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Do Email Verification
      parameters:
      - description: Register Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/verification.VerificationRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.BaseResponse'
      summary: Email Verification
      tags:
      - auth
swagger: "2.0"
